//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : CDialogForm.cpp
//  @ Date : 2013/9/12
//  @ Author : 
//
//


#include "CDialogForm.h"
SMALL_RECT CDialogForm::defaultRect={0,0,79,24};
CDialogForm::CDialogForm() {
	m_text="";
	m_rect=defaultRect;
}
CDialogForm::CDialogForm(string title, const SMALL_RECT &rect):CForm(title,rect) {
	m_index=0;
	m_exit=false;
}

void CDialogForm::OnOk() {

}
void CDialogForm::OnNo() {

}


void CDialogForm::OnCancel() {
	m_exit=true;
}

void CDialogForm::SetControlFocus(int p) {
	int key='\t';
	m_controls[m_index]->FocusOn();
	while (m_exit == false)
	{
		if (m_index == 0)
		{
			key = '\t';
		}
		key = m_controls[m_index]->Input(key);
		DoWillKeyDown(key);
	}
	m_controls[m_index]->FocusOff();
}

void CDialogForm::DoWillKeyDown(char key) {
	switch(key)
	{
	case UP:
		m_controls[m_index]->FocusOff();
		m_index=(m_index+m_controls.size()-1)%m_controls.size();
		m_controls[m_index]->FocusOn();
		break;
	case DOWN:
	case '\t':
	case ENTER:
		m_controls[m_index]->FocusOff();
		m_index=(m_index+1)%m_controls.size();
		m_controls[m_index]->FocusOn();
		break;
	case CForm::ID_OK:
		OnOk();
		break;
	case CForm::ID_CANCEL:
		OnCancel();
		break;
	case CForm::ID_NO:
		OnNo();
		break;
	}
}

CDialogForm::~CDialogForm() {
	for (int i=0;i<m_controls.size();i++)
	{
		if (m_controls[i]!=NULL)
		{
			delete m_controls[i];
		}
	}
}

void CDialogForm::Show() {
	DrawFrame(1);
	PrintTitle(CForm::Middle);
	int i;
	for (i = 0;i < m_controls.size(); i++)
	{
		m_controls[i]->Show();
	}
}

int CDialogForm::Input(int key) {
	Show();
	while (m_exit==0)
	{
		if (m_index==0)
		{
			key='\t';
		}
		key=m_controls[m_index]->Input(key);
		switch(key){
		case '\t':
		case ID_OK:
			OnOk();
			break;
		case ID_CANCEL:
			OnCancel();
			break;
		case CForm::ID_NO:
			OnNo();
			break;
		}
	}
	return 0;
}

int CDialogForm::Load(int key) {
	m_exit=false;
	Show();
	SetControlFocus(key);
	return m_index;
}
void CDialogForm::PrintTitle(int alignment) {
	const char * ss=m_text.c_str();
	int len1,len2,p;
	ChgAttribute(White,Blue);
	SMALL_RECT rect={m_rect.Left+2,m_rect.Top+1,m_rect.Right-2,m_rect.Top+1};
	ClearWindow(rect);
	switch (alignment)
	{
	case CForm::Left:
		CForm::PrintWord(ss,m_rect.Left+2,m_rect.Top+1);
		for (int i=((strlen(ss)+1)&(-2))+2;i<m_rect.Right-2;i+=2)
		{
			CForm::PrintWord("  ",i,m_rect.Top+1);
		}
		break;
	case CForm::Middle:
		len1=(m_rect.Right-m_rect.Left-3)/2;
		len2=(strlen(ss)+1)/2;
		p=m_rect.Left+2;
		for (int i=0;i<(len1-len2+1)/2;i++,p+=2)
		{
			CForm::PrintWord("  ",p,m_rect.Top+1);
		}
		CForm::PrintWord(ss,p,m_rect.Top+1);
		p+=2*len2;
		for (int i=0;i<(len1-len2)/2;i++,p+=2)
		{
			CForm::PrintWord("  ",p,m_rect.Top+1);
		}
		break;
	case CForm::Right:
		len1=(m_rect.Right-m_rect.Left-3)/2;
		len2=(strlen(ss)+1)/2;
		p=m_rect.Left+2;
		for (int i=0;i<len1-len2;i++,p+=2)
		{
			CForm::PrintWord("  ",p,m_rect.Top+1);
		}
		CForm::PrintWord(ss,p,m_rect.Top+1);
		break;
	}
	RetAttribute();
}
void CDialogForm::createLableEdit(string s,int len1,int len2,int x,int y,CEdit*&ret){
	SMALL_RECT rect1 = {x,y+1,x+len1,y+1};
	CForm *pform=new CStatic(s,rect1);
	m_controls.push_back(pform);
	if (len2%2)
	{
		len2++;
	}
	SMALL_RECT rect2 = {rect1.Right+1,rect1.Top-1,rect1.Right+len2+4,rect1.Bottom+1};
	ret=new CEdit("",rect2,len2-1,0);
	pform=ret;
	m_controls.push_back(pform);
}